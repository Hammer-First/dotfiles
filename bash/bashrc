# -------------------------------------
# スクリプト実行時などインタラクティブシェルの場合はbashrcを読み込まない
# -------------------------------------
case $- in
    *i*) ;;
      *) return;;
esac

# -------------------------------------
# 履歴管理
# -------------------------------------
# 先頭にスペースがある場合と直前と同じコマンドは履歴に残さない
HISTCONTROL=ignoreboth
# 履歴情報を上書きするので別のターミナルで実行した結果も残す
shopt -s histappend
# 履歴情報を残すサイズ
HISTSIZE=10000
HISTFILESIZE=20000

# -------------------------------------
# aliasの設定
# -------------------------------------
# nvimのエイリアスの設定
alias vim='nvim'
# UbuntuPCへの接続設定
# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# -------------------------------------
# 環境変数の読み込み
# -------------------------------------
# Git管理したくない環境変数はファイルに定義する
if [ -f ~/.environments ]; then
    . ~/.environments
fi

# -------------------------------------
# SSHのパスフレーズ省略
# -------------------------------------
# SSH_AGENT_PIDが空（エージェントが未起動）の場合のみエージェントを起動し、鍵を追加する
if [ -z "$SSH_AGENT_PID" ]; then
    eval "$(ssh-agent -s)" >/dev/null 2>&1
    if [ -f ~/.ssh/id_ed25519 ]; then
        ssh-add ~/.ssh/id_ed25519
    fi
fi

# -------------------------------------
# その他の設定
# -------------------------------------
# 画面サイズが変更された場合に自動で表示を更新する設定
shopt -s checkwinsize

# lessコマンドでバイナリや圧縮ファイルを適切に処理するようにする
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# コマンドの色情報の設定
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# -------------------------------------
# OSの判定
# -------------------------------------
os=$(uname -s)

if [[ "$os" == "Linux" ]]; then
  echo "Linux detected"
elif [[ "$os" == "Darwin" ]]; then
  echo "macOS detected"
elif [[ "$os" == "FreeBSD" ]]; then
  echo "FreeBSD detected"
elif [[ "$os" == "MINGW"* ]]; then
  echo "Windows (MSYS2/Cygwin) detected"
else
  echo "Unknown OS: $os"
fi


# -------------------------------------
# プロンプトの設定
# -------------------------------------
if [ -f ~/dotfiles/bash/prompt ]; then
    . ~/dotfiles/bash/prompt
fi


# -------------------------------------
# Bashの補完機能の設定
# -------------------------------------
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# -------------------------------------
# Cargoの設定（Rust）
# -------------------------------------

if [ -f ~/.carge/env ]; then
  . "$HOME/.local/bin/env"
  . "$HOME/.cargo/env"
fi

# -------------------------------------
# fzfの設定
# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# ~/.fzf/install
# -------------------------------------
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# -------------------------------------
# nvmの設定
# ノードバージョンマネージャー
# Node.jsの管理ツール
# -------------------------------------
export NVM_DIR="$HOME/.nvm"
export PATH="$PATH:/opt/nvim-linux-x86_64/bin"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# -------------------------------------
# x-cmdの設定
# 既存のOSSパッケージを便利に使えるように拡張したパッケージ
# -------------------------------------
[ ! -f "$HOME/.x-cmd.root/X" ] || . "$HOME/.x-cmd.root/X" # boot up x-cmd.
